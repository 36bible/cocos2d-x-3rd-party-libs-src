diff -rupN libwebsockets-15c92b1bf6a4562733b52e03b9e2f21421d180c6/lib/lws-plat-win.c libwebsockets2/lib/lws-plat-win.c
--- libwebsockets-15c92b1bf6a4562733b52e03b9e2f21421d180c6/lib/lws-plat-win.c	2016-01-17 20:11:23.000000000 -0800
+++ libwebsockets2/lib/lws-plat-win.c	2016-02-23 14:21:36.626654500 -0800
@@ -418,6 +418,9 @@ lws_plat_inet_ntop(int af, const void *s
 	return ok ? dst : NULL;
 }
 
+
+#if !defined(WINAPI_FAMILY) || (WINAPI_FAMILY == WINAPI_FAMILY_DESKTOP_APP)
+
 static lws_filefd_type
 _lws_plat_file_open(struct lws *wsi, const char *filename,
 		    unsigned long *filelen, int flags)
@@ -441,6 +444,36 @@ _lws_plat_file_open(struct lws *wsi, con
 
 	return ret;
 }
+#else
+static lws_filefd_type
+_lws_plat_file_open(struct lws *wsi, const char *filename,
+    unsigned long *filelen, int flags)
+{
+    HANDLE ret;
+    WCHAR buf[MAX_PATH];
+
+    (void)wsi;
+    MultiByteToWideChar(CP_UTF8, 0, filename, -1, buf, ARRAY_SIZE(buf));
+    if ((flags & 7) == _O_RDONLY) {
+        ret = CreateFile2(buf, GENERIC_READ, FILE_SHARE_READ, OPEN_EXISTING, NULL);
+    }
+    else {
+        lwsl_err("%s: open for write not implemented\n", __func__);
+        *filelen = 0;
+        return LWS_INVALID_FILE;
+    }
+
+    if (ret != LWS_INVALID_FILE)
+    {
+        struct stat info;
+        int result = stat(filename, &info);
+        *filelen = result != 0 ? -1 : (long)(info.st_size);
+    }
+
+    return ret;
+}
+#endif
+
 
 static int
 _lws_plat_file_close(struct lws *wsi, lws_filefd_type fd)
@@ -457,7 +490,12 @@ _lws_plat_file_seek_cur(struct lws *wsi,
 {
 	(void)wsi;
 
-	return SetFilePointer((HANDLE)fd, offset, NULL, FILE_CURRENT);
+    LARGE_INTEGER t; 
+    t.QuadPart = (LONGLONG)offset; 
+    return SetFilePointerEx(fd, t, NULL, 1);
+
+
+	//return SetFilePointer((HANDLE)fd, offset, NULL, FILE_CURRENT);
 }
 
 static int
diff -rupN libwebsockets-15c92b1bf6a4562733b52e03b9e2f21421d180c6/lib/private-libwebsockets.h libwebsockets2/lib/private-libwebsockets.h
--- libwebsockets-15c92b1bf6a4562733b52e03b9e2f21421d180c6/lib/private-libwebsockets.h	2016-01-17 20:11:23.000000000 -0800
+++ libwebsockets2/lib/private-libwebsockets.h	2016-02-23 14:21:46.383753900 -0800
@@ -40,12 +40,25 @@
 #endif
 
 #if defined(WIN32) || defined(_WIN32)
+
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY != WINAPI_FAMILY_DESKTOP_APP)
+    #ifndef WINVER
+        #define WINVER 0x0602
+        #define _WIN32_WINNT WINVER
+    #endif
+
+    #define getenv(x) NULL
+    #define _WINSOCK_DEPRECATED_NO_WARNINGS
+#else
+
 #if (WINVER < 0x0501)
-#undef WINVER
-#undef _WIN32_WINNT
-#define WINVER 0x0501
-#define _WIN32_WINNT WINVER
+    #undef WINVER
+    #undef _WIN32_WINNT
+    #define WINVER 0x0501
+    #define _WIN32_WINNT WINVER
+    #endif
 #endif
+
 #define LWS_NO_DAEMONIZE
 #define LWS_ERRNO WSAGetLastError()
 #define LWS_EAGAIN WSAEWOULDBLOCK
@@ -72,7 +85,17 @@
 #ifdef LWS_HAVE_IN6ADDR_H
 #include <in6addr.h>
 #endif
+
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP)
+struct tcp_keepalive {
+    ULONG onoff;
+    ULONG keepalivetime;
+    ULONG keepaliveinterval;
+};
+#define SIO_KEEPALIVE_VALS  _WSAIOW(IOC_VENDOR,4)
+#else
 #include <mstcpip.h>
+#endif
 
 #ifndef __func__
 #define __func__ __FUNCTION__
